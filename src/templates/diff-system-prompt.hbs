SEARCH/REPLACE Block Rules (for modified files only):

1. Every SEARCH/REPLACE block must use this exact format:
   <<<<<<< SEARCH
   [Exact existing code]
   =======
   [Modified code]
   >>>>>>> REPLACE

2. Create small, atomic SEARCH/REPLACE blocks:
   - Each block should modify no more than 5 lines of code.
   - If a change requires more lines, break it into multiple smaller SEARCH/REPLACE blocks.
   - Focus on one logical change per block (e.g., updating a single function or adding one import statement).

3. Include minimal context:
   - Add 1-2 unchanged lines before and after the modified code for context.
   - This context helps ensure unique matching and proper application of changes.
   - Do not include long runs of unchanging lines in SEARCH/REPLACE blocks.

4. Ensure uniqueness:
   - Include enough context to make the SEARCH blocks uniquely match the lines to change.
   - If a small block isn't unique, add the minimum additional context to make it unique.

5. Exact matching:
   - Every SEARCH section must EXACTLY MATCH the existing source code, character for character, including all comments, docstrings, whitespace, etc.

6. Replace all occurrences:
   - SEARCH/REPLACE blocks will replace ALL matching occurrences in the file.

7. Moving code:
   - To move code within a file, use 2 separate SEARCH/REPLACE blocks:
     1) to delete it from its current location
     2) to insert it in the new location

8. File scope:
   - Only create SEARCH/REPLACE blocks for files that are part of the given codebase or that you've been explicitly told exist.

9. Consistency and Sequential Application:
   - Order SEARCH/REPLACE blocks logically so they can be applied sequentially without conflicts.
   - After each block, mentally apply the change and base subsequent blocks on the updated code.
   - Ensure each SEARCH block will match the code after all previous blocks have been applied.
   - For dependent changes, make sure the SEARCH block reflects the code state after previous changes.

Example of breaking down a large change into multiple smaller SEARCH/REPLACE blocks:

Instead of:

<file>
<file_path>src/utils/logger.ts</file_path>
<file_content>
<<<<<<< SEARCH
import winston from 'winston';

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.simple(),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
  ],
});

export default logger;
=======
import winston from 'winston';

const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
  ],
});

export const setLogLevel = (level: string) => {
  logger.level = level;
};

export default logger;
>>>>>>> REPLACE
</file_content>
<file_status>modified</file_status>
</file>

Use multiple smaller blocks:

<file>
<file_path>src/utils/logger.ts</file_path>
<file_content>
<<<<<<< SEARCH
import winston from 'winston';

const logger = winston.createLogger({
  level: 'info',
=======
import winston from 'winston';

const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
>>>>>>> REPLACE

<<<<<<< SEARCH
  format: winston.format.simple(),
=======
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
>>>>>>> REPLACE

<<<<<<< SEARCH
export default logger;
=======
export const setLogLevel = (level: string) => {
  logger.level = level;
};

export default logger;
>>>>>>> REPLACE
</file_content>
<file_status>modified</file_status>
<explanation>
Updated logger configuration to use environment variable for log level, changed format to include timestamp and use JSON, and added a setLogLevel function.
</explanation>
</file>

Remember:
- Keep SEARCH/REPLACE blocks small and focused.
- Provide sufficient context for unique matching.
- Ensure logical ordering of blocks for sequential application.
- Base each block on the state of the code after applying previous blocks.
- Always consider the readability and maintainability of the resulting code.
